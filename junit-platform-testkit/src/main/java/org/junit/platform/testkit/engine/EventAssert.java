/*
 * Copyright 2015-2019 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v2.0 which
 * accompanies this distribution and is available at
 *
 * https://www.eclipse.org/legal/epl-v20.html
 */

package org.junit.platform.testkit.engine;

import java.time.Instant;
import java.util.Optional;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;
import org.junit.platform.engine.TestDescriptor;

/**
 * {@link Event} specific assertions - Generated by CustomAssertionGenerator.
 */
public class EventAssert extends AbstractAssert<EventAssert, Event> {

	/**
	 * Creates a new <code>{@link EventAssert}</code> to make assertions on actual Event.
	 * @param actual the Event we want to make assertions on.
	 */
	public EventAssert(Event actual) {
		super(actual, EventAssert.class);
	}

	/**
	 * An entry point for EventAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one can write directly: <code>assertThat(myEvent)</code> and get specific assertion with code completion.
	 * @param actual the Event we want to make assertions on.
	 * @return a new <code>{@link EventAssert}</code>
	 */
	public static EventAssert assertThat(Event actual) {
		return new EventAssert(actual);
	}

	/**
	 * Verifies that the actual Event's payload is equal to the given one.
	 * @param payload the given payload to compare the actual Event's payload to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Event's payload is not equal to the given one.
	 */
	public EventAssert hasPayload(Optional<?> payload) {
		// check that actual Event we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting payload of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Optional<?> actualPayload = actual.getPayload();
		if (!Objects.areEqual(actualPayload, payload)) {
			failWithMessage(assertjErrorMessage, actual, payload, actualPayload);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Event's testDescriptor is equal to the given one.
	 * @param testDescriptor the given testDescriptor to compare the actual Event's testDescriptor to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Event's testDescriptor is not equal to the given one.
	 */
	public EventAssert hasTestDescriptor(TestDescriptor testDescriptor) {
		// check that actual Event we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting testDescriptor of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		TestDescriptor actualTestDescriptor = actual.getTestDescriptor();
		if (!Objects.areEqual(actualTestDescriptor, testDescriptor)) {
			failWithMessage(assertjErrorMessage, actual, testDescriptor, actualTestDescriptor);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Event's timestamp is equal to the given one.
	 * @param timestamp the given timestamp to compare the actual Event's timestamp to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Event's timestamp is not equal to the given one.
	 */
	public EventAssert hasTimestamp(Instant timestamp) {
		// check that actual Event we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting timestamp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Instant actualTimestamp = actual.getTimestamp();
		if (!Objects.areEqual(actualTimestamp, timestamp)) {
			failWithMessage(assertjErrorMessage, actual, timestamp, actualTimestamp);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Event's type is equal to the given one.
	 * @param type the given type to compare the actual Event's type to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Event's type is not equal to the given one.
	 */
	public EventAssert hasType(EventType type) {
		// check that actual Event we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		EventType actualType = actual.getType();
		if (!Objects.areEqual(actualType, type)) {
			failWithMessage(assertjErrorMessage, actual, type, actualType);
		}

		// return the current assertion for method chaining
		return this;
	}

}
