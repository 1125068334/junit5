/*
 * Copyright 2015-2019 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v2.0 which
 * accompanies this distribution and is available at
 *
 * https://www.eclipse.org/legal/epl-v20.html
 */

package org.junit.platform.testkit.engine;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;
import org.junit.platform.engine.TestExecutionResult;

/**
 * {@link TerminationInfo} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TerminationInfoAssert extends AbstractAssert<TerminationInfoAssert, TerminationInfo> {

	/**
	 * Creates a new <code>{@link TerminationInfoAssert}</code> to make assertions on actual TerminationInfo.
	 * @param actual the TerminationInfo we want to make assertions on.
	 */
	public TerminationInfoAssert(TerminationInfo actual) {
		super(actual, TerminationInfoAssert.class);
	}

	/**
	 * An entry point for TerminationInfoAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one can write directly: <code>assertThat(myTerminationInfo)</code> and get specific assertion with code completion.
	 * @param actual the TerminationInfo we want to make assertions on.
	 * @return a new <code>{@link TerminationInfoAssert}</code>
	 */
	public static TerminationInfoAssert assertThat(TerminationInfo actual) {
		return new TerminationInfoAssert(actual);
	}

	/**
	 * Verifies that the actual TerminationInfo's executionResult is equal to the given one.
	 * @param executionResult the given executionResult to compare the actual TerminationInfo's executionResult to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual TerminationInfo's executionResult is not equal to the given one.
	 * @throws UnsupportedOperationException if actual.getExecutionResult() throws one.
	 */
	public TerminationInfoAssert hasExecutionResult(TestExecutionResult executionResult)
			throws UnsupportedOperationException {
		// check that actual TerminationInfo we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting executionResult of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		TestExecutionResult actualExecutionResult = actual.getExecutionResult();
		if (!Objects.areEqual(actualExecutionResult, executionResult)) {
			failWithMessage(assertjErrorMessage, actual, executionResult, actualExecutionResult);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual TerminationInfo's skipReason is equal to the given one.
	 * @param skipReason the given skipReason to compare the actual TerminationInfo's skipReason to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual TerminationInfo's skipReason is not equal to the given one.
	 * @throws UnsupportedOperationException if actual.getSkipReason() throws one.
	 */
	public TerminationInfoAssert hasSkipReason(String skipReason) throws UnsupportedOperationException {
		// check that actual TerminationInfo we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting skipReason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualSkipReason = actual.getSkipReason();
		if (!Objects.areEqual(actualSkipReason, skipReason)) {
			failWithMessage(assertjErrorMessage, actual, skipReason, actualSkipReason);
		}

		// return the current assertion for method chaining
		return this;
	}

}
