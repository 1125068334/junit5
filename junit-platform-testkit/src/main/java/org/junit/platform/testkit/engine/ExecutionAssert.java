/*
 * Copyright 2015-2019 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v2.0 which
 * accompanies this distribution and is available at
 *
 * https://www.eclipse.org/legal/epl-v20.html
 */

package org.junit.platform.testkit.engine;

import java.time.Duration;
import java.time.Instant;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;
import org.junit.platform.engine.TestDescriptor;

/**
 * {@link Execution} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ExecutionAssert extends AbstractAssert<ExecutionAssert, Execution> {

	/**
	 * Creates a new <code>{@link ExecutionAssert}</code> to make assertions on actual Execution.
	 * @param actual the Execution we want to make assertions on.
	 */
	public ExecutionAssert(Execution actual) {
		super(actual, ExecutionAssert.class);
	}

	/**
	 * An entry point for ExecutionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one can write directly: <code>assertThat(myExecution)</code> and get specific assertion with code completion.
	 * @param actual the Execution we want to make assertions on.
	 * @return a new <code>{@link ExecutionAssert}</code>
	 */
	public static ExecutionAssert assertThat(Execution actual) {
		return new ExecutionAssert(actual);
	}

	/**
	 * Verifies that the actual Execution's duration is equal to the given one.
	 * @param duration the given duration to compare the actual Execution's duration to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Execution's duration is not equal to the given one.
	 */
	public ExecutionAssert hasDuration(Duration duration) {
		// check that actual Execution we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting duration of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Duration actualDuration = actual.getDuration();
		if (!Objects.areEqual(actualDuration, duration)) {
			failWithMessage(assertjErrorMessage, actual, duration, actualDuration);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Execution's endInstant is equal to the given one.
	 * @param endInstant the given endInstant to compare the actual Execution's endInstant to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Execution's endInstant is not equal to the given one.
	 */
	public ExecutionAssert hasEndInstant(Instant endInstant) {
		// check that actual Execution we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting endInstant of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Instant actualEndInstant = actual.getEndInstant();
		if (!Objects.areEqual(actualEndInstant, endInstant)) {
			failWithMessage(assertjErrorMessage, actual, endInstant, actualEndInstant);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Execution's startInstant is equal to the given one.
	 * @param startInstant the given startInstant to compare the actual Execution's startInstant to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Execution's startInstant is not equal to the given one.
	 */
	public ExecutionAssert hasStartInstant(Instant startInstant) {
		// check that actual Execution we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting startInstant of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Instant actualStartInstant = actual.getStartInstant();
		if (!Objects.areEqual(actualStartInstant, startInstant)) {
			failWithMessage(assertjErrorMessage, actual, startInstant, actualStartInstant);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Execution's terminationInfo is equal to the given one.
	 * @param terminationInfo the given terminationInfo to compare the actual Execution's terminationInfo to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Execution's terminationInfo is not equal to the given one.
	 */
	public ExecutionAssert hasTerminationInfo(TerminationInfo terminationInfo) {
		// check that actual Execution we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting terminationInfo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		TerminationInfo actualTerminationInfo = actual.getTerminationInfo();
		if (!Objects.areEqual(actualTerminationInfo, terminationInfo)) {
			failWithMessage(assertjErrorMessage, actual, terminationInfo, actualTerminationInfo);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Execution's testDescriptor is equal to the given one.
	 * @param testDescriptor the given testDescriptor to compare the actual Execution's testDescriptor to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Execution's testDescriptor is not equal to the given one.
	 */
	public ExecutionAssert hasTestDescriptor(TestDescriptor testDescriptor) {
		// check that actual Execution we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting testDescriptor of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		TestDescriptor actualTestDescriptor = actual.getTestDescriptor();
		if (!Objects.areEqual(actualTestDescriptor, testDescriptor)) {
			failWithMessage(assertjErrorMessage, actual, testDescriptor, actualTestDescriptor);
		}

		// return the current assertion for method chaining
		return this;
	}

}
